import pkg from "telegraf";
const { Telegraf, Markup } = pkg;
import dotenv from "dotenv";
import schedule from "node-schedule";
dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const userData = {};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const ACTIVITY_LEVELS = {
  "ü™ë –ù–∏–∑–∫–∞—è": 1.2,
  "üö∂ –°—Ä–µ–¥–Ω—è—è": 1.55,
  "üèÉ –í—ã—Å–æ–∫–∞—è": 1.725,
};

const WEB_APP_BUTTON = Markup.button.webApp(
  "üì≤ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
  "https://–≤–∞—à-—Å–∞–π—Ç.app"
);

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainMenu = Markup.keyboard([
  ["üç¥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏"],
  [WEB_APP_BUTTON]
]).resize();

const calculationMenu = Markup.keyboard([
  ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏", "üìä –û—Å—Ç–∞—Ç–æ–∫"],
  [WEB_APP_BUTTON]
]).resize();

const afterInputMenu = Markup.keyboard([
  ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "üìä –û—Å—Ç–∞—Ç–æ–∫"],
  [WEB_APP_BUTTON]
]).resize();

// –§—É–Ω–∫—Ü–∏–∏
function createProgressBar(consumed, total) {
  const percentage = Math.min(100, Math.round((consumed / total) * 100));
  const filled = '‚ñì'.repeat(Math.round(percentage / 5));
  const empty = '‚ñë'.repeat(20 - filled.length);
  return `${filled}${empty} ${percentage}%`;
}

function getCaloriesStatus(remaining) {
  if (remaining < 0) return `üî¥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –Ω–∞ ${Math.abs(remaining)} –∫–∫–∞–ª`;
  if (remaining < 200) return 'üü° –ü–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ—Ä–º—ã';
  return 'üü¢ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã';
}

function scheduleDailyReset() {
  schedule.scheduleJob('0 0 * * *', () => {
    Object.keys(userData).forEach(userId => {
      if (userData[userId]?.dailyCalories) {
        userData[userId].consumedCalories = 0;
        userData[userId].remainingCalories = userData[userId].dailyCalories;
        bot.telegram.sendMessage(
          userId,
          `üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å! –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: ${userData[userId].dailyCalories} –∫–∫–∞–ª`,
          calculationMenu
        ).catch(console.error);
      }
    });
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
bot.start(ctx => ctx.replyWithMarkdown(
  `ü•ó *–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–∏—Ç–∞–Ω–∏—è*\n\n–Ø –ø–æ–º–æ–≥—É —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞—Ü–∏–æ–Ω–æ–º!`,
  mainMenu
));

bot.hears("üç¥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏", ctx => {
  userData[ctx.from.id] = {};
  ctx.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", Markup.inlineKeyboard([
    [Markup.button.callback("‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π", "gender_male")],
    [Markup.button.callback("‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π", "gender_female")]
  ]));
});

bot.action(/gender_(male|female)/, ctx => {
  userData[ctx.from.id].gender = ctx.match[1];
  ctx.deleteMessage();
  ctx.reply("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", Markup.removeKeyboard());
});

bot.on("text", ctx => {
  const userId = ctx.from.id;
  const user = userData[userId];
  if (!user?.gender) return;

  if (!user.age) {
    const age = parseInt(ctx.message.text);
    if (isNaN(age)) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:");
    user.age = age;
    return ctx.reply("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):");
  }

  if (!user.weight) {
    const weight = parseFloat(ctx.message.text);
    if (isNaN(weight)) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:");
    user.weight = weight;
    return ctx.reply("üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º):");
  }

  if (!user.height) {
    const height = parseInt(ctx.message.text);
    if (isNaN(height)) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:");
    user.height = height;
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", Markup.inlineKeyboard([
      [Markup.button.callback("ü™ë –ù–∏–∑–∫–∞—è", "activity_low")],
      [Markup.button.callback("üö∂ –°—Ä–µ–¥–Ω—è—è", "activity_medium")],
      [Markup.button.callback("üèÉ –í—ã—Å–æ–∫–∞—è", "activity_high")]
    ]));
  }
});

bot.action(/activity_(low|medium|high)/, ctx => {
  const userId = ctx.from.id;
  const user = userData[userId];
  const activity = ctx.match[1];
  
  const bmr = user.gender === "male"
    ? 88.362 + 13.397 * user.weight + 4.799 * user.height - 5.677 * user.age
    : 447.593 + 9.247 * user.weight + 3.098 * user.height - 4.33 * user.age;
  
  const activityText = {
    low: "ü™ë –ù–∏–∑–∫–∞—è",
    medium: "üö∂ –°—Ä–µ–¥–Ω—è—è",
    high: "üèÉ –í—ã—Å–æ–∫–∞—è"
  }[activity];
  
  user.dailyCalories = Math.round(bmr * ACTIVITY_LEVELS[activityText]);
  user.consumedCalories = 0;
  user.remainingCalories = user.dailyCalories;
  
  ctx.deleteMessage();
  ctx.replyWithMarkdown(
    `*–í–∞—à–∞ –Ω–æ—Ä–º–∞: ${user.dailyCalories} –∫–∫–∞–ª/–¥–µ–Ω—å*\n` +
    `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityText}`,
    calculationMenu
  );
});

bot.hears(/^(\d+)\s*(–∫–∫–∞–ª)?$/i, ctx => {
  const userId = ctx.from.id;
  const user = userData[userId];
  if (!user?.dailyCalories) return ctx.reply("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –Ω–æ—Ä–º—É", mainMenu);

  const calories = parseInt(ctx.match[1]);
  user.consumedCalories = (user.consumedCalories || 0) + calories;
  user.remainingCalories = user.dailyCalories - user.consumedCalories;

  ctx.replyWithMarkdown(
    `‚úÖ +${calories} –∫–∫–∞–ª\n` +
    `${createProgressBar(user.consumedCalories, user.dailyCalories)}\n` +
    `üçΩ –°—ä–µ–¥–µ–Ω–æ: ${user.consumedCalories}\n` +
    `‚öñÔ∏è –û—Å—Ç–∞–ª–æ—Å—å: ${user.remainingCalories}\n` +
    `üìä ${getCaloriesStatus(user.remainingCalories)}`,
    afterInputMenu
  );
});

bot.hears("üìä –û—Å—Ç–∞—Ç–æ–∫", ctx => {
  const userId = ctx.from.id;
  const user = userData[userId];
  if (!user?.dailyCalories) return ctx.reply("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –Ω–æ—Ä–º—É", mainMenu);

  ctx.replyWithMarkdown(
    `üìä *–ë–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π*\n\n` +
    `${createProgressBar(user.consumedCalories || 0, user.dailyCalories)}\n` +
    `üî∏ –ù–æ—Ä–º–∞: ${user.dailyCalories} –∫–∫–∞–ª\n` +
    `üçΩ –°—ä–µ–¥–µ–Ω–æ: ${user.consumedCalories || 0}\n` +
    `‚öñÔ∏è –û—Å—Ç–∞–ª–æ—Å—å: ${user.remainingCalories}\n` +
    `üìà ${getCaloriesStatus(user.remainingCalories)}`,
    calculationMenu
  );
});

bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", ctx => ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:"));

// –ó–∞–ø—É—Å–∫
bot.launch().then(() => {
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
  scheduleDailyReset();
}).catch(console.error);

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));