import { Telegraf, session, Markup } from 'telegraf';
import dotenv from 'dotenv';
import process from 'node:process';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
dotenv.config();
const bot = new Telegraf(process.env.BOT_TOKEN);
const WEB_APP_URL = 'https://velvety-marigold-d0d59a.netlify.app';

// ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–°–°–ò–ò ==================
bot.use(session({
  defaultSession: () => ({
    isFirstLaunch: true,
    step: null,
    profile: {
      age: null,
      weight: null,
      height: null,
      gender: null,
      activity: null
    },
    dailyCalories: null,
    consumedToday: 0,
    waterIntake: 0,
    meals: [],
    history: [],
    reminders: []
  })
}));

// ================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ú–ï–ù–Æ ==================
const getMainMenu = (ctx) => {
  const buttons = [];
  
  if (!ctx.session.profile.age) {
    buttons.push([Markup.button.callback('üçΩ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', 'calculate_calories')]);
  } else {
    buttons.push(
      [Markup.button.callback(`üìä –û—Å—Ç–∞—Ç–æ–∫: ${ctx.session.dailyCalories - ctx.session.consumedToday} –∫–∫–∞–ª`, 'calories_left')],
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', 'add_product')],
      [Markup.button.callback('üíß –í–æ–¥–∞: ' + ctx.session.waterIntake + ' –º–ª', 'water_tracker')]
    );
  }

  buttons.push(
    [Markup.button.webApp('üì≤ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', WEB_APP_URL)],
    [Markup.button.callback('‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', 'extra_menu')]
  );

  return Markup.inlineKeyboard(buttons);
};

const extraMenu = Markup.inlineKeyboard([
  [Markup.button.callback('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'set_reminders')],
  [Markup.button.callback('üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞', 'show_charts')],
  [Markup.button.callback('üç± –®–∞–±–ª–æ–Ω—ã —Ä–∞—Ü–∏–æ–Ω–æ–≤', 'meal_templates')],
  [Markup.button.callback('üì¶ –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã', 'my_products')],
  [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_main')]
]);

// ================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================
bot.start((ctx) => {
  const message = ctx.session.isFirstLaunch 
    ? '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å —Ä–∞—Å—á–µ—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π. üçè\n–ù–∞—á–Ω–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–π –Ω–æ—Ä–º—ã?'
    : '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?';
  
  ctx.session.isFirstLaunch = false;
  return ctx.reply(message, getMainMenu(ctx));
});

// ================== –†–ê–°–ß–ï–¢ –ö–ê–õ–û–†–ò–ô ==================
const calculateCalories = (age, weight, height, gender, activity) => {
  const bmr = gender === 'male' 
    ? 10 * weight + 6.25 * height - 5 * age + 5
    : 10 * weight + 6.25 * height - 5 * age - 161;
  
  const factors = { low: 1.2, medium: 1.375, high: 1.55 };
  return Math.round(bmr * factors[activity]);
};

bot.action('calculate_calories', (ctx) => {
  ctx.session.step = 'age';
  return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:', Markup.removeKeyboard());
});

bot.on('text', async (ctx) => {
  if (ctx.session.step === 'age') {
    const age = parseInt(ctx.message.text);
    if (age < 10 || age > 120) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-120):');
    ctx.session.profile.age = age;
    ctx.session.step = 'weight';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):');
  }
  else if (ctx.session.step === 'weight') {
    const weight = parseFloat(ctx.message.text);
    if (weight < 30 || weight > 300) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (30-300 –∫–≥):');
    ctx.session.profile.weight = weight;
    ctx.session.step = 'height';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º):');
  }
  else if (ctx.session.step === 'height') {
    const height = parseFloat(ctx.message.text);
    if (height < 100 || height > 250) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):');
    ctx.session.profile.height = height;
    ctx.session.step = 'gender';
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', Markup.inlineKeyboard([
      [Markup.button.callback('–ú—É–∂—Å–∫–æ–π ‚ôÇÔ∏è', 'gender_male')],
      [Markup.button.callback('–ñ–µ–Ω—Å–∫–∏–π ‚ôÄÔ∏è', 'gender_female')]
    ]));
  }
});

bot.action(['gender_male', 'gender_female'], async (ctx) => {
  ctx.session.profile.gender = ctx.callbackQuery.data.replace('gender_', '');
  ctx.session.step = 'activity';
  await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:', Markup.inlineKeyboard([
    [Markup.button.callback('–ù–∏–∑–∫–∞—è üõå', 'activity_low')],
    [Markup.button.callback('–°—Ä–µ–¥–Ω—è—è üö∂‚Äç‚ôÇÔ∏è', 'activity_medium')],
    [Markup.button.callback('–í—ã—Å–æ–∫–∞—è üèãÔ∏è‚Äç‚ôÇÔ∏è', 'activity_high')]
  ]));
});

bot.action(['activity_low', 'activity_medium', 'activity_high'], async (ctx) => {
  const activity = ctx.callbackQuery.data.replace('activity_', '');
  const { age, weight, height, gender } = ctx.session.profile;
  
  ctx.session.dailyCalories = calculateCalories(age, weight, height, gender, activity);
  ctx.session.history.push({
    date: new Date().toLocaleDateString(),
    calories: ctx.session.dailyCalories
  });
  
  await ctx.deleteMessage();
  await ctx.replyWithHTML(
    `‚úÖ <b>–í–∞—à–∞ –Ω–æ—Ä–º–∞:</b> ${ctx.session.dailyCalories} –∫–∫–∞–ª/–¥–µ–Ω—å\n\n` +
    `‚ñ™ –í–æ–∑—Ä–∞—Å—Ç: ${age}\n‚ñ™ –í–µ—Å: ${weight} –∫–≥\n‚ñ™ –†–æ—Å—Ç: ${height} —Å–º\n` +
    `‚ñ™ –ü–æ–ª: ${gender === 'male' ? '‚ôÇÔ∏è' : '‚ôÄÔ∏è'}\n‚ñ™ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activity.replace('_', ' ')}`,
    getMainMenu(ctx)
  );
});

// ================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================
bot.action('water_tracker', (ctx) => {
  ctx.session.step = 'water_input';
  return ctx.reply('–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã –≤—ã–ø–∏–ª–∏ (–º–ª)?');
});

bot.on('text', async (ctx) => {
  if (ctx.session.step === 'water_input') {
    const ml = parseInt(ctx.message.text);
    if (isNaN(ml)) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!');
    ctx.session.waterIntake += ml;
    await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${ml} –º–ª. –í—Å–µ–≥–æ: ${ctx.session.waterIntake} –º–ª`);
    return ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainMenu(ctx));
  }
});

bot.action('extra_menu', (ctx) => {
  return ctx.editMessageText('‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', extraMenu);
});

bot.action('back_to_main', (ctx) => {
  return ctx.editMessageText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainMenu(ctx));
});

// ================== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° WEBAPP ==================
bot.on('web_app_data', (ctx) => {
  const data = ctx.webAppData.data.json();
  if (data.type === 'add_product') {
    ctx.session.consumedToday += data.calories;
    ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${data.calories} –∫–∫–∞–ª (${data.name})`, getMainMenu(ctx));
  }
});

// ================== –ó–ê–ü–£–°–ö ==================
bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ'));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));